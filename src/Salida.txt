Borramos los archivos *.o
	rm double_linked_list/double_linked_list.o points/2d_points.o red_black_tree/rb_tree.o range_tree/range_tree.o main.o
Borramos el ejecutable main
	rm main
Borramos todos los archivos .so
	rm lib/*.so
Compilando archivos fuentes:
	gcc -fpic -c -o double_linked_list/double_linked_list.o double_linked_list/double_linked_list.c -I.
	gcc -fpic -c -o points/2d_points.o points/2d_points.c -I.
	gcc -fpic -c -o red_black_tree/rb_tree.o red_black_tree/rb_tree.c -I.
	gcc -fpic -c -o range_tree/range_tree.o range_tree/range_tree.c -I.
Convirtiendo a bibliotecas dinamicas
	gcc -shared -Wl,-soname,libdouble_linked_list.so.so.1 -o lib/libdouble_linked_list.so double_linked_list/double_linked_list.o -Llib/ 
	gcc -shared -Wl,-soname,lib2d_points.so.so.1 -o lib/lib2d_points.so points/2d_points.o -Llib/ -ldouble_linked_list 
	gcc -shared -Wl,-soname,librb_tree.so.so.1 -o lib/librb_tree.so red_black_tree/rb_tree.o -Llib/ -l2d_points -ldouble_linked_list 
	gcc -shared -Wl,-soname,librange_tree.so.so.1 -o lib/librange_tree.so range_tree/range_tree.o -Llib/ -l2d_points -ldouble_linked_list -lrb_tree 
Corriendo Tests:

   2d_points.h: create_copy_point                                                   [PASS]

   double_linked_list.h: pop de una lista vacia                                     [PASS]
   double_linked_list.h: Mas push, menos pop                                        [PASS]
   double_linked_list.h: Menos push, mas pop                                        [PASS]
   double_linked_list.h: pick de una lista vacia                                    [PASS]
   double_linked_list.h: pick en una lista no vacia                                 [PASS]

   rb_tree.h: rb_min en un arbol vacio                                              [PASS]
   rb_tree.h: rb_max en un arbol vacio                                              [PASS]
   rb_tree.h: rb_search en un arbol vacio                                           [PASS]
   rb_tree.h: rb_delete en un arbol vacio                                           [PASS]
   rb_tree.h: rb_min                                                                [PASS]
   rb_tree.h: rb_max                                                                [PASS]
   rb_tree.h: rb_search                                                             [PASS]
   rb_tree.h: rb_insert y rb_delete de numberos positivos                           [PASS]
   rb_tree.h: rb_insert y rb_delete de numberos negativos                           [PASS]
   rb_tree.h: rb_insert y rb_delete de numberos repetidos                           [PASS]

   range_tree.h: two_d_range_query recibe NULL.                                     [PASS]
   range_tree.h: two_d_range_query recibe un arbol vac√≠o.                           [PASS]
   range_tree.h: two_d_range_query recibe un arbol no vacio                         [FAIL]


Tests aprobados: 18
Tests fallidos: 1
Borramos los archivos *.o
	rm double_linked_list/double_linked_list.o points/2d_points.o red_black_tree/rb_tree.o range_tree/range_tree.o main.o
Borramos el ejecutable main
	rm main
Borramos todos los archivos .so
	rm lib/*.so
Coordinates: x=6350,000000,x1=6661,000000, y=7982,000000, y1=6931,000000
El split_node X para x=6350,000000 y x1=6661,000000 es: (6420,000000,4313,000000)
El punto es: (6372,000000,5419,000000)
